"""Unit-tests for :class:`EdgeRuntime`.

The tests cover:

* correct delivery when the random 'uniform' draw exceeds the drop rate;
* correct drop behaviour when the draw is below the drop rate;
* that the latency sampler is invoked exactly once per message.
"""
from __future__ import annotations

from collections.abc import Iterator
from typing import TYPE_CHECKING, cast

import numpy as np
import pytest
import simpy

from app.config.constants import NetworkParameters, SystemNodes
from app.config.rqs_state import RequestState
from app.core.event_samplers.common_helpers import general_sampler
from app.core.runtime.edge import EdgeRuntime
from app.schemas.random_variables_config import RVConfig
from app.schemas.system_topology_schema.full_system_topology_schema import Edge

if TYPE_CHECKING:
    from collections.abc import Generator


pytestmark = pytest.mark.unit  # module-level marker


# --------------------------------------------------------------------------- #
# Dummy RNG                                                                   #
# --------------------------------------------------------------------------- #


class DummyRNG:
    """RNG stub returning preset values for `uniform()` and `normal()`."""

    def __init__(
        self,
        *,
        uniform_value: float,
        sampler_value: float = 0.0,
    ) -> None:
        self.uniform_value = uniform_value
        self.sampler_value = sampler_value
        self.uniform_called = False
        self.sampler_called = False

    def uniform(self) -> float:  # noqa: D401
        self.uniform_called = True
        return self.uniform_value

    # EdgeRuntime passes `self` to `general_sampler`; wrap the call
    def normal(self, mean: float, sigma: float) -> float:  # noqa: D401
        self.sampler_called = True
        return self.sampler_value


# --------------------------------------------------------------------------- #
# Helper to create a minimal EdgeRuntime                                      #
# --------------------------------------------------------------------------- #


def _make_edge(
    env: simpy.Environment,
    *,
    uniform_value: float,
    sampler_value: float = 0.0,
) -> tuple[EdgeRuntime, DummyRNG, simpy.Store]:
    rng = DummyRNG(uniform_value=uniform_value, sampler_value=sampler_value)
    store: simpy.Store = simpy.Store(env)

    edge_cfg = Edge(
        id="edge-1",
        source="src",
        target="dst",
        latency=RVConfig(mean=0.0, distribution="uniform"),  # value ignored in test
    )

    edge_rt = EdgeRuntime(
        env=env,
        edge_config=edge_cfg,
        rng=cast("np.random.Generator", rng),
        target_box=store,
    )
    return edge_rt, rng, store


# --------------------------------------------------------------------------- #
# Tests                                                                       #
# --------------------------------------------------------------------------- #


def test_edge_delivers_message_when_not_dropped() -> None:
    """Message is delivered and latency sampler is called once."""
    env = simpy.Environment()
    edge, rng, store = _make_edge(env, uniform_value=0.9, sampler_value=0.5)

    # prepare request state
    state = RequestState(id=1, initial_time=0.0)
    state.record_hop(SystemNodes.GENERATOR, env.now)

    edge.transport(state)
    env.run()

    # exactly one message delivered
    assert len(store.items) == 1
    delivered: RequestState = store.items[0]
    assert delivered.hops[-1].node == "edge-1"  # last hop is the edge id
    assert rng.uniform_called is True
    assert rng.sampler_called is True


def test_edge_drops_message_when_uniform_below_threshold(
    monkeypatch: pytest.MonkeyPatch,
) -> None:
    """Message is dropped and never placed in the target store."""
    # override global drop rate to deterministic 0.5 for the test
    monkeypatch.setattr(NetworkParameters, "DROPOUT_RATE", 0.5, raising=False)

    env = simpy.Environment()
    edge, rng, store = _make_edge(env, uniform_value=0.1)  # below 0.5 â‡’ drop

    state = RequestState(id=2, initial_time=0.0)
    state.record_hop(SystemNodes.GENERATOR, env.now)

    edge.transport(state)
    env.run()

    assert len(store.items) == 0  # nothing delivered
    assert state.hops[-1].node.endswith("dropped")
    assert rng.uniform_called is True
    # sampler must not be invoked when dropped
    assert rng.sampler_called is False
